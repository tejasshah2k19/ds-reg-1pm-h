Army -> 
            AK47 
            M4:X
            Sniper 
            ShotGun 
            Pistol
            Rifel
            Bazooka
            Graned 
            hockey 



            time 
            space 
            
void add () 
        -> void : return type 
        -> add  : function name 
        -> ()   : argument 


        return type ? 
        len = strlen("royal"); 


int a[10]; 1D

[][] 

MD 
[][][] 
[][][][]


a[0]....a[9]

0 1 2 3 4 ---> index : subscript 

always start with 0 and ends with SIZE-1 

array collection of data 
     same type of data 
     contin. memory allocation 




------------------------------------------------------------


main  -> location  , num , display 


search ---> 

ds -> search -> 

1) linear search  : seq : line by line 
        0 1 2 3 4 

2) binary search 


prior condition ===> array ==> sorted array 


 Binary search ---> 

        min max 


        while(min <= max  )

                mid = (min+max) / 2 

                search == a[mid]
                                found 
                search > a[mid] 
                                right
                                min = mid + 1          
                search < a[mid]
                                left
                                max = mid - 1 
-----------------------------------------------------------------------------

trinary search ? 
        yes ? 
        no  ?

-----------------------------------------------------------------------------


Linear DS -> 
                        STACK 


memory --> 

                int a; //4 byte 
                int a[10]; //40 byte 


  
  
  
  long term   : heap 
  short term  : stack 
                              

STACK ----> 

PUSH : insert item / element 
POP  : remove item / element 
display : display all item / element

PEEP -> location item / element 
peek -> stack top position item / element  


STACK -> local variable 

-------------------------------------------------------------------------------------------------

sorting -> {bubble,selection,insertion,merge,quick}


        85,74,69,52,15,38,48
        sorting logic 
        15 38 48 52 69 74 85 



85,74,69,52,15,38,48
        

85,74,69,52,15,38,48
pass 1
74,85,69,52,15,38,48
74,69,85,52,15,38,48
74,69,52,85,15,38,48
74,69,52,15,85,38,48
74,69,52,15,38,85,48
74,69,52,15,38,48,85

pass 2 
74,69,52,15,38,48,85
69,74,52,15,38,48,85
69,52,74,15,38,48,85
69,52,15,74,38,48,85
69,52,15,38,74,48,85
69,52,15,38,48,74,85

pass 3 
69,52,15,38,48,74,85
52,69,15,38,48,74,85
52,15,69,38,48,74,85
52,15,38,69,48,74,85
52,15,38,48,69,74,85

pass 4
52,15,38,48,69,74,85
15,52,38,48,69,74,85
15,38,52,48,69,74,85
15,38,48,52,69,74,85

pass 5 
                





96,32,48,74,58,15
j  j+1


32,48,74,58,15,96
             j  j+1



-----------------------------------------------------
selection sort 

96	32	48	74	58	15

-----------------------------------------------------
insertion sort 
96	32	48	74	58	15


32	96	48	74	58	15

tmp=48
32	48	96	74	58	15


tmp=74
32	48	74	96	58	15


tmp=58
32	48	58	74	96	15



tmp=15
15	32	48	58	74	96






insertion sort 
34,5,67,89,50



tmp=5
5      34       67      89      50


tmp=67
5      34       67      89      50


tmp=89
5      34       67      89      50



tmp=50
5      34       50      67      89


--------------------------------------------------------------

98,76,54,32,12,34,56 

tmp=76
98      76      54      32      12      34      56
j       i 



tmp=76 
76      98      54      32      12      34      56
        

tmp=54 
54      76      98      32      12      34      56


tmp=32 
32      54      76      98      12      34      56


tmp=12 
12      32      54      76      98      34      56


tmp=34 
12      32      34      54      76      98      56


tmp=56 
12      32      34      54      56      76      98        

--------------------------------------------------

1 value 
int x; 

5 value 
int a,b,c,d,e; 

50 int value
50 float  

int a[50]; 
float b[50]; 


studentName 
maths
sci
eng
percentage 

structure ->  collection of mix type of data 


struct Student{
        char studentName;
        int maths,sci,eng;
        float percentage;
};


-----------------------------------------------------
DMA -> 
                        explicit 
                        user define 
                        self 



void main(){

        int a; //allocation 








                // a no need 




}//


stdlib.h 
function --> DMA 
                1) calloc
                2) malloc 
                3) free 
                4) realloc 



Rule : memory -> variable -> pointer -> 


int *p;

p = malloc(sizeof(int));//
//gcc:int:4  tc:int:2

------------------------------------------------------

create int array of size 5 using DMA , scan those data using getData() and 
print all data using printData(). 
create oddSum() which print sum of all odd numbers from the array. 

no global variable 
------------------------------------------------------


monthly expense 
tracker 



date
title
amount
category 


#include <stdio.h>
#include <stdlib.h>

struct Expense
{

    char date[11]; // 22042025 22-04-2025 22/04/2025
    char title[30];
    int amount;
    char category[30];
};

struct Expense e[50];
int index = 0;

-------------------------------------------------------------------------------
student 


continue -> 

1. Add Student 
2. List Student 
3. Exit 


1. Add Student 

Enter rollNum and Name 
1
Ram
Enter Marks of three Subject:
98
58
62


1. Add Student 
2. List Student 
3. Exit 

1

Enter rollNum and Name 
2
Laxman
Enter Marks of three Subject:
95
85
72


1. Add Student 
2. List Student 
3. Exit 6
2       
2
Ram      98     58      62      98      52      218               
Laxman   95     85      72      95      72      252

------------------------------------------------------------------------

struct student{
        int rollNum;
        char name[30];
        int s1,s2,s3; 
        int minMarks;
        int maxMarks;
        int totalObtain;
};


------------------------------------------------------------------------

non linear data structure -> 
                tree 
                graph 


Binary Tree :- 
                        min : 0 child  
                        max : 2 child 
        
node :- data {left child , right child}

1) parent node 
2) child node 
3) root node 
4) leaf node 
5) sibling 
6) height : start with 1 
7) level  : start with 0 
-----------------------------------------------------------------------------

87,65,43,23,45,67,89,86,54,32


49,57,67,94,85,76,75,84,90,39,48,68,9

-----------------------------------------------------------------------------

inOrder : left root right 
preOrder : root left right 
postOrder : left right root 

-----------------------------------------------------------------------------
 tree practical --> 
 ----------------------------------------------------------------------------


 AVL Tree -> 
        1) BST {min:0 max:2 root < left root > right }
        2) Node Balance Factor {-1 0 1 } valid 


        1 2 3 4 5 6 7 -> BST 

Balance Factor -> how to calculate? 

        BF|node| = node->left_height - node-> right_height 


BF invalid -> Tree Rotation -> 

                          Right Rotation 
                          Left Rotation 



1) LL Imbalance  -> Right Rotation {1} 
2) RR Imbalance  -> Left  Rotation {1}
3) LR Imbalance  -> Left-Right Rotation {2} 
4) RL Imbalance  -> Right-Left Rotation {2}


-----------------------------------------------------------------------------------
Non Linear -> tree 
                Graph -> 

Graph 
        g = {v,e}

        weighted graph -> your edges have a cost 
        directed graph - diagraph -> your  edges have a direction 
        mix graph -> parellal edges , loop 

-----------------------------------------------------------------------------------

Dynamic Graph 







































