Army -> 
            AK47 
            M4:X
            Sniper 
            ShotGun 
            Pistol
            Rifel
            Bazooka
            Graned 
            hockey 



            time 
            space 
            
void add () 
        -> void : return type 
        -> add  : function name 
        -> ()   : argument 


        return type ? 
        len = strlen("royal"); 


int a[10]; 1D

[][] 

MD 
[][][] 
[][][][]


a[0]....a[9]

0 1 2 3 4 ---> index : subscript 

always start with 0 and ends with SIZE-1 

array collection of data 
     same type of data 
     contin. memory allocation 




------------------------------------------------------------


main  -> location  , num , display 


search ---> 

ds -> search -> 

1) linear search  : seq : line by line 
        0 1 2 3 4 

2) binary search 


prior condition ===> array ==> sorted array 


 Binary search ---> 

        min max 


        while(min <= max  )

                mid = (min+max) / 2 

                search == a[mid]
                                found 
                search > a[mid] 
                                right
                                min = mid + 1          
                search < a[mid]
                                left
                                max = mid - 1 
-----------------------------------------------------------------------------

trinary search ? 
        yes ? 
        no  ?

-----------------------------------------------------------------------------


Linear DS -> 
                        STACK 


memory --> 

                int a; //4 byte 
                int a[10]; //40 byte 


  
  
  
  long term   : heap 
  short term  : stack 
                              

STACK ----> 

PUSH : insert item / element 
POP  : remove item / element 
display : display all item / element

PEEP -> location item / element 
peek -> stack top position item / element  


STACK -> local variable 

-------------------------------------------------------------------------------------------------

sorting -> {bubble,selection,insertion,merge,quick}


        85,74,69,52,15,38,48
        sorting logic 
        15 38 48 52 69 74 85 



85,74,69,52,15,38,48
        

85,74,69,52,15,38,48
pass 1
74,85,69,52,15,38,48
74,69,85,52,15,38,48
74,69,52,85,15,38,48
74,69,52,15,85,38,48
74,69,52,15,38,85,48
74,69,52,15,38,48,85

pass 2 
74,69,52,15,38,48,85
69,74,52,15,38,48,85
69,52,74,15,38,48,85
69,52,15,74,38,48,85
69,52,15,38,74,48,85
69,52,15,38,48,74,85

pass 3 
69,52,15,38,48,74,85
52,69,15,38,48,74,85
52,15,69,38,48,74,85
52,15,38,69,48,74,85
52,15,38,48,69,74,85

pass 4
52,15,38,48,69,74,85
15,52,38,48,69,74,85
15,38,52,48,69,74,85
15,38,48,52,69,74,85

pass 5 
                





96,32,48,74,58,15
j  j+1


32,48,74,58,15,96
             j  j+1



-----------------------------------------------------
selection sort 

96	32	48	74	58	15

-----------------------------------------------------
insertion sort 
96	32	48	74	58	15


32	96	48	74	58	15

tmp=48
32	48	96	74	58	15


tmp=74
32	48	74	96	58	15


tmp=58
32	48	58	74	96	15



tmp=15
15	32	48	58	74	96






insertion sort 
34,5,67,89,50



tmp=5
5      34       67      89      50


tmp=67
5      34       67      89      50


tmp=89
5      34       67      89      50



tmp=50
5      34       50      67      89


--------------------------------------------------------------

98,76,54,32,12,34,56 

tmp=76
98      76      54      32      12      34      56
j       i 



tmp=76 
76      98      54      32      12      34      56
        

tmp=54 
54      76      98      32      12      34      56


tmp=32 
32      54      76      98      12      34      56


tmp=12 
12      32      54      76      98      34      56


tmp=34 
12      32      34      54      76      98      56


tmp=56 
12      32      34      54      56      76      98        

--------------------------------------------------

1 value 
int x; 

5 value 
int a,b,c,d,e; 

50 int value
50 float  

int a[50]; 
float b[50]; 


studentName 
maths
sci
eng
percentage 

structure ->  collection of mix type of data 


struct Student{
        char studentName;
        int maths,sci,eng;
        float percentage;
};


















